package hotpotato
import shapeless._
import shapeless.ops.coproduct._
import hotpotato.coproduct.Unique
import shapeless.syntax.inject._
import cats.implicits._

trait ErrorTransSyntax {
  [#
  implicit class ErrorTransCoproductOps1[F[_, _], [# L1 #], R](in: F[[#L1# :+: ] :+: CNil, R]) {
    def mapErrorAllInto[OutL](
      [#func1: L1 => OutL#,
      ]
    )(
      implicit errorTrans: ErrorTrans[F]
    ): F[OutL, R] = {
      errorTrans.bifunctor.leftMap(in) {
        [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => func1(e)#
        ]
        case [1..#Inr(# ]e[1..#)# ] => e.impossible
      }
    }

    def mapErrorAll[[#L1Out#]](
      [#func1: L1 => L1Out#,
      ]
    )(
      implicit unique: Unique[[#L1Out :+:# ] CNil],
      errorTrans: ErrorTrans[F]
    ): F[unique.Out, R] = {
      errorTrans.bifunctor.leftMap(in) { err =>
        type LOut = [#L1Out :+: # ] CNil
        err match {
          [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => unique(func1(e).inject[LOut])# ]
          case [1..#Inr(# ]e[1..#)# ] => e.impossible
        }
      }
    }

    def flatMapErrorAllInto[OutL](
      [#func1: L1 => F[OutL, R]#,
      ]
    )(
      implicit errorTrans: ErrorTrans[F]
    ): F[OutL, R] = {
      errorTrans.flatMapError(in) {
        [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => func1(e)#
        ]
        case [1..#Inr(# ]e[1..#)# ] => e.impossible
      }
    }

    def flatMapErrorAll[[#L1Out#]](
      [#func1: L1 => F[L1Out, R]#,
      ]
    )(
      implicit unique: Unique[[#L1Out :+:# ] CNil],
      errorTrans: ErrorTrans[F]
    ): F[unique.Out, R] = {
      errorTrans.flatMapError(in) { err =>
        type LOut = [#L1Out :+: # ] CNil
        err match {
          [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => errorTrans.bifunctor.bimap(func1(e))(eOut => unique(eOut.inject[LOut]), identity)# ]
          case [1..#Inr(# ]e[1..#)# ] => e.impossible
        }
      }
    }
  }
  # ]

  implicit class ErrorTransCoproductOps[F[_, _], L <: Coproduct, R](in: F[L, R]) {
  [1..8#
    def mapErrorSome[[#L1, L1Out#], BasisRest <: Coproduct, UniqueOut <: Coproduct](
        [#func1: L1 => L1Out#,
        ]
    )(
      implicit basis: Basis.Aux[L, [#L1# :+: ] :+: CNil, BasisRest],
      unique: Unique.Aux[[#L1Out# :+: ] :+: BasisRest, UniqueOut],
      errorTrans: ErrorTrans[F]
    ): F[UniqueOut, R] = {
      errorTrans.bifunctor.leftMap(in) { err =>
        unique.apply {
          basis(err) match {
            case Left(rest) => rest.extendLeftBy[[#L1Out# :+: ] :+: CNil]
            case Right(extracted) => {
              type LOut = [#L1Out# :+: ] :+: BasisRest
              extracted match {
                [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => Coproduct[LOut](func1(e))#
                ]
                case [1..#Inr(# ]e[1..#)# ] => e.impossible
              }
            }
          }
        }
      }
    }
    # ]

  [1..8#
    def flatMapErrorSome[[#L1, L1Out#], BasisRest <: Coproduct, UniqueOut <: Coproduct](
        [#func1: L1 => F[L1Out, R]#,
        ]
    )(
      implicit basis: Basis.Aux[L, [#L1# :+: ] :+: CNil, BasisRest],
      unique: Unique.Aux[[#L1Out# :+: ] :+: BasisRest, UniqueOut],
      errorTrans: ErrorTrans[F]
    ): F[UniqueOut, R] = {
      errorTrans.flatMapError(in) { err =>
        basis(err) match {
          case Left(rest) => errorTrans.pureError(unique.apply(rest.extendLeftBy[[#L1Out# :+: ] :+: CNil]))
          case Right(extracted) => {
            type LOut = [#L1Out# :+: ] :+: BasisRest
            extracted match {
              [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => errorTrans.bifunctor.leftMap(func1(e))(
                lxOut => unique.apply(Coproduct[LOut](lxOut)),
              )#
              ]
              case [1..#Inr(# ]e[1..#)# ] => e.impossible
            }
          }
        }
      }
    }# ]

    /** Unify all coproduct error types into the common parent type ("least upper bound") */
    def unifyError[UnifiedL](
      implicit errorTrans: ErrorTrans[F],
      unifier: Unifier.Aux[L, UnifiedL]
    ): F[UnifiedL, R] = {
      errorTrans.bifunctor.leftMap(in) { err =>
        unifier(err)
      }
    }

    /** Singleton die case where error will be Nothing since all errors are eliminated */
    def dieIf1[L1 <: Throwable](
      implicit errorTransThrow: ErrorTransThrow[F],
      ev: L =:= (L1 :+: CNil)
    ): F[Nothing, R] = {
      errorTransThrow.extractAndThrow(in) { errors =>
        ev(errors) match {
          case Inl(e1) => Left(e1)
          case Inr(cnil) => cnil.impossible
        }
      }
    }

    def dieIf[L1 <: Throwable](
      implicit errorTransThrow: ErrorTransThrow[F],
      remove: Remove[L, L1],
    ): F[remove.Rest, R] = {
    // Special implementation of throw1 because shapeless Unifier doesn't support upcasting
    // coproduct with single element
      errorTransThrow.extractAndThrow(in) { errors =>
        remove(errors)
      }
    }
    [2..8#
    def dieIf[[#L1#]](
      implicit errorTransThrow: ErrorTransThrow[F],
      basis: Basis[L, [#L1 :+:# ] CNil],
      unifier: Unifier.Aux[[#L1# :+: ] :+: CNil, Throwable],
      [2..#dummy0: DummyImplicit#,
      ]
    ): F[basis.Rest, R] = {
      errorTransThrow.extractAndThrow(in) { errors =>
        basis.apply(errors).swap.leftMap(unifier.apply(_))
      }
    }
    # ]

  }

  implicit class ErrorTransOps[F[_, _], L, R](in: F[L, R]) {
    /**
     * Split an error (which is a sealed trait) into its coproduct representation
     * (A coproduct of its children types)
     */
    def errorAsCoproduct[LCopRepr <: Coproduct](
      implicit errorTrans: ErrorTrans[F],
        gen: Generic.Aux[L, LCopRepr]
    ): F[LCopRepr, R] = errorTrans.bifunctor.leftMap(in)(l => gen.to(l))

    @inline def errorIs[LL](
      implicit ev: L =:= LL
    ): F[LL, R] = {
      val _ = ev // unused
      in.asInstanceOf[F[LL, R]]
    }
  }

}

